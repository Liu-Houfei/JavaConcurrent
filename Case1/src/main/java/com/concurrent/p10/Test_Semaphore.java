package com.concurrent.p10;

import lombok.extern.slf4j.Slf4j;
import org.junit.Test;

import java.util.concurrent.Semaphore;

/**
 * 信号量测试
 */
@Slf4j(topic = "c.Test_Semaphore")
public class Test_Semaphore {

    /**
     * 15:31:09.082 [Thread-0] DEBUG c.Test_Semaphore - start...
     * 15:31:09.081 [Thread-1] DEBUG c.Test_Semaphore - start...
     * 15:31:09.081 [Thread-2] DEBUG c.Test_Semaphore - start...
     * 15:31:11.086 [Thread-2] DEBUG c.Test_Semaphore - end...
     * 15:31:11.086 [Thread-0] DEBUG c.Test_Semaphore - end...
     * 15:31:11.086 [Thread-1] DEBUG c.Test_Semaphore - end...
     * 15:31:11.086 [Thread-3] DEBUG c.Test_Semaphore - start...
     * 15:31:11.086 [Thread-4] DEBUG c.Test_Semaphore - start...
     * 15:31:11.086 [Thread-5] DEBUG c.Test_Semaphore - start...
     * 15:31:13.086 [Thread-3] DEBUG c.Test_Semaphore - end...
     * 15:31:13.086 [Thread-4] DEBUG c.Test_Semaphore - end...
     * 15:31:13.086 [Thread-5] DEBUG c.Test_Semaphore - end...
     * 15:31:13.086 [Thread-6] DEBUG c.Test_Semaphore - start...
     * 15:31:13.086 [Thread-7] DEBUG c.Test_Semaphore - start...
     * 15:31:13.086 [Thread-8] DEBUG c.Test_Semaphore - start...
     * 15:31:15.087 [Thread-7] DEBUG c.Test_Semaphore - end...
     * 15:31:15.087 [Thread-8] DEBUG c.Test_Semaphore - end...
     * 15:31:15.087 [Thread-9] DEBUG c.Test_Semaphore - start...
     * 15:31:15.087 [Thread-6] DEBUG c.Test_Semaphore - end...
     * 15:31:17.087 [Thread-9] DEBUG c.Test_Semaphore - end...
     */
    @Test
    public void test1() {
        //创建Semaphore对象,最大允许3个线程同时运行
        Semaphore semaphore = new Semaphore(3);
        for (int i = 0; i < 10; i++) {
            new Thread(() -> {
                try {
                    semaphore.acquire();
                    log.debug("start...");
                    Thread.sleep(2000);
                    log.debug("end...");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    semaphore.release();
                }
            }).start();
        }
        for (; ; ) ;
    }
}
